"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8484],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),i=n(6010);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),i=n(7294),o=n(6010),r=n(2389),s=n(7392),l=n(7094),d=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function p(e){var t;const{lazy:n,block:r,defaultValue:p,values:m,groupId:h,className:f}=e,b=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,s.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:k}=(0,l.U)(),[T,x]=(0,i.useState)(v),N=[],{blockElementScrollPositionUntilNextRender:P}=(0,d.o5)();if(null!=h){const e=w[h];null!=e&&e!==T&&g.some((t=>t.value===e))&&x(e)}const I=e=>{const t=e.currentTarget,n=N.indexOf(t),a=g[n].value;a!==T&&(P(t),x(a),null!=h&&k(h,String(a)))},S=e=>{var t;let n=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,o.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},f)},g.map((e=>{let{value:t,label:n,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>N.push(e),onKeyDown:S,onClick:I},r,{className:(0,o.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,i.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,r.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}},8643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=n(7462),i=(n(7294),n(3905)),o=n(5488),r=n(5162);const s={sidebar_position:5},l="Interface Segregation Principle (ISP)",d={unversionedId:"solid-principles/interface_segregation_principle",id:"solid-principles/interface_segregation_principle",title:"Interface Segregation Principle (ISP)",description:"The Interface Segregation Principle (ISP) is a principle of object-oriented design that states that no client should be forced to depend on methods it does not use. This means that classes should have small, specific interfaces that only include the methods that are actually needed by the client classes. This allows for better code organization and maintainability, as well as flexibility to accommodate future changes in requirements. To implement the ISP, developers can use techniques such as abstraction and composition.",source:"@site/docs/solid-principles/04_interface_segregation_principle.md",sourceDirName:"solid-principles",slug:"/solid-principles/interface_segregation_principle",permalink:"/para_ruby/docs/solid-principles/interface_segregation_principle",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Liskov Substitution Principle (LSP)",permalink:"/para_ruby/docs/solid-principles/liskov_substitution_principle"},next:{title:"Dependency Inversion Principle (DIP)",permalink:"/para_ruby/docs/solid-principles/dependency_inversion_principle"}},c={},u=[{value:"Code examples",id:"code-examples",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interface-segregation-principle-isp"},"Interface Segregation Principle (ISP)"),(0,i.kt)("p",null,"The Interface Segregation Principle (ISP) is a principle of object-oriented design that states that no client should be forced to depend on methods it does not use. This means that classes should have small, specific interfaces that only include the methods that are actually needed by the client classes. This allows for better code organization and maintainability, as well as flexibility to accommodate future changes in requirements. To implement the ISP, developers can use techniques such as ",(0,i.kt)("a",{parentName:"p",href:"/para_ruby/docs/glossary/abstraction"},"abstraction")," and ",(0,i.kt)("a",{parentName:"p",href:"/para_ruby/docs/glossary/composition"},"composition"),"."),(0,i.kt)("admonition",{title:"Explain Interface Segregation Principle (ISP) like I'm five",type:"info"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"The Interface Segregation Principle is like a toolbox. In a toolbox, there are different tools for different jobs. For example, there might be a hammer for pounding nails, and a screwdriver for turning screws. And even though the hammer and the screwdriver are both tools, they are not used for the same thing. So if you want to use the hammer, you don't have to look through the whole toolbox to find it. You can just go to the part of the toolbox where the hammers are, and take out the one you need. In object-oriented programming, the tools are like methods, and the toolbox is like an interface. The Interface Segregation Principle says that interfaces should be organized into small, specific parts, so that you can easily find the methods you need without having to look through lots of other methods that you don't need."))),(0,i.kt)("h2",{id:"code-examples"},"Code examples"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"bad",label:"Bad",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'class Animal\n  def eat\n    puts "Eating food"\n  end\n\n  def sleep\n    puts "Sleeping"\n  end\n\n  def swim\n    puts "Swimming"\n  end\n\n  def fly\n    puts "Flying"\n  end\nend\n\nclass Dog < Animal\n  def swim\n    puts "Dogs can\'t swim"\n  end\n\n  def fly\n    puts "Dogs can\'t fly"\n  end\nend\n\nclass Bird < Animal\n  def swim\n    puts "Birds can\'t swim"\n  end\nend\n\ndog = Dog.new\nbird = Bird.new\n\ndog.eat\ndog.sleep\ndog.swim\ndog.fly\n\nbird.eat\nbird.sleep\nbird.swim\nbird.fly\n')),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," class has four methods: ",(0,i.kt)("inlineCode",{parentName:"p"},"eat"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sleep"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"swim"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"fly"),". However, not all animals can perform all of these actions. For example, dogs cannot swim or fly, and birds cannot swim."),(0,i.kt)("p",null,"This violates the Interface Segregation Principle because it requires classes that inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," to implement methods that they may not need or be able to use. A better design would be to split the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," class into smaller, more specialized interfaces that only contain the methods relevant to a specific group of animals. For example, you could create an ",(0,i.kt)("inlineCode",{parentName:"p"},"AquaticAnimal")," interface with a swim method, a ",(0,i.kt)("inlineCode",{parentName:"p"},"FlyingAnimal")," interface with a fly method, and so on. This would allow you to create more specialized classes that only need to implement the methods relevant to their behavior, rather than being forced to implement unnecessary methods.")),(0,i.kt)(r.Z,{value:"good",label:"Good",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'module Aquatic\n  def swim\n    puts "Swimming"\n  end\nend\n\nmodule Flying\n  def fly\n    puts "Flying"\n  end\nend\n\nclass Animal\n  def eat\n    puts "Eating food"\n  end\n\n  def sleep\n    puts "Sleeping"\n  end\nend\n\nclass Dog < Animal\n  include Aquatic\n\n  def swim\n    puts "Dogs can\'t swim"\n  end\nend\n\nclass Bird < Animal\n  include Flying\nend\n\ndog = Dog.new\nbird = Bird.new\n\ndog.eat\ndog.sleep\ndog.swim\n\nbird.eat\nbird.sleep\nbird.fly\n')),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Aquatic")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Flying")," modules contain methods for the specific behavior of aquatic and flying animals. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," class includes the eat and sleep methods that are common to all animals. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," class includes the ",(0,i.kt)("inlineCode",{parentName:"p"},"Aquatic")," module, which gives it the ability to swim, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Bird")," class includes the ",(0,i.kt)("inlineCode",{parentName:"p"},"Flying")," module, which gives it the ability to fly."),(0,i.kt)("p",null,"This design adheres to the Interface Segregation Principle because it allows you to create specialized interfaces for different groups of animals, and classes that inherit from these interfaces only need to implement the methods relevant to their behavior. This helps to reduce the amount of unnecessary or irrelevant methods that a class must implement, and makes the code easier to understand and maintain.")),(0,i.kt)(r.Z,{value:"specs",label:"Specs",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'describe Animal do\n  describe "#eat" do\n    it "outputs \'Eating food\'" do\n      expect { subject.eat }.to output("Eating food\\n").to_stdout\n    end\n  end\n\n  describe "#sleep" do\n    it "outputs \'Sleeping\'" do\n      expect { subject.sleep }.to output("Sleeping\\n").to_stdout\n    end\n  end\nend\n\ndescribe Dog do\n  it "includes the Aquatic module" do\n    expect(described_class.ancestors).to include(Aquatic)\n  end\n\n  describe "#swim" do\n    it "outputs \'Dogs can\'t swim\'" do\n      expect { subject.swim }.to output("Dogs can\'t swim\\n").to_stdout\n    end\n  end\nend\n\ndescribe Bird do\n  it "includes the Flying module" do\n    expect(described_class.ancestors).to include(Flying)\n  end\n\n  describe "#fly" do\n    it "outputs \'Flying\'" do\n      expect { subject.fly }.to output("Flying\\n").to_stdout\n    end\n  end\nend\n')),(0,i.kt)("p",null,"These tests cover the basic behavior of the Animal, Dog, and Bird classes. They verify that the eat and sleep methods of the Animal class work as expected, and that the Dog class includes the Aquatic module and overrides the swim method with its own implementation. They also verify that the Bird class includes the Flying module and implements the fly method."),(0,i.kt)("p",null,"You may want to add additional tests to cover other aspects of the code, such as testing the swim method of the Aquatic module and the fly method of the Flying module. You could also add tests for any other methods or functionality that you want to include in your code."))))}m.isMDXComponent=!0}}]);