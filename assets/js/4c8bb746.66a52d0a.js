"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5014],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,b=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(b,s(s({ref:n},p),{},{components:t})):a.createElement(b,s({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),i=t(6010),s=t(2389),o=t(7392),l=t(7094),d=t(2466);const p="tabList__CuJ",c="tabItem_LNqP";function u(e){var n;const{lazy:t,block:s,defaultValue:u,values:m,groupId:b,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=m??f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),v=(0,o.l)(y,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===u?u:u??(null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)??f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:k}=(0,l.U)(),[x,_]=(0,r.useState)(g),j=[],{blockElementScrollPositionUntilNextRender:O}=(0,d.o5)();if(null!=b){const e=w[b];null!=e&&e!==x&&y.some((n=>n.value===e))&&_(e)}const T=e=>{const n=e.currentTarget,t=j.indexOf(n),a=y[t].value;a!==x&&(O(n),_(a),null!=b&&k(b,String(a)))},P=e=>{var n;let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},h)},y.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:e=>j.push(e),onKeyDown:P,onClick:T},s,{className:(0,i.Z)("tabs__item",c,null==s?void 0:s.className,{"tabs__item--active":x===n})}),t??n)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==x})))))}function m(e){const n=(0,s.Z)();return r.createElement(u,(0,a.Z)({key:String(n)},e))}},2925:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),i=t(5488),s=t(5162);const o={sidebar_position:2},l="The Single Responsibility Principle (SRP)",d={unversionedId:"solid-principles/single_responsibility_principle",id:"solid-principles/single_responsibility_principle",title:"The Single Responsibility Principle (SRP)",description:"The Single Responsibility Principle (SRP) is a principle of object-oriented programming (OOP) that states that a class",source:"@site/docs/solid-principles/01_single_responsibility_principle.md",sourceDirName:"solid-principles",slug:"/solid-principles/single_responsibility_principle",permalink:"/para_ruby/docs/solid-principles/single_responsibility_principle",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"What is SOLID",permalink:"/para_ruby/docs/solid-principles/the_five_principles"},next:{title:"Open/Closed Principle (OCP)",permalink:"/para_ruby/docs/solid-principles/open_closed_principle"}},p={},c=[{value:"Code examples",id:"code-examples",level:2}],u={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-single-responsibility-principle-srp"},"The Single Responsibility Principle (SRP)"),(0,r.kt)("p",null,"The Single Responsibility Principle (SRP) is a principle of object-oriented programming (OOP) that states that a class\nshould only have a single responsibility, or a single reason to change. In other words, a class should focus on one\nspecific aspect of the problem domain, and should not be cluttered with unrelated responsibilities or functionality."),(0,r.kt)("admonition",{title:"Explain The Single Responsibility Principle like I'm five",type:"info"},(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"The Single Responsibility Principle is like a job. Everyone has a different job, and they do their job really well.\nFor example, one person might be really good at making cookies, and another person might be really good at washing\ndishes. If they each just do their own job, then they will be able to make lots of cookies and wash lots of dishes.\nBut\nif they try to do each other's job, then they might not be as good at it, and they might not be able to make as many\ncookies or wash as many dishes. So it's better for everyone to just do their own job and not try to do other people's\njobs."))),(0,r.kt)("h2",{id:"code-examples"},"Code examples"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"bad",label:"Bad",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"In this code, the User class is responsible for multiple things: validating input, saving to the database, and sending an email. This violates the Single Responsibility Principle because the class has more than one reason to change. For example, if the way that the input is validated needs to change, or if the way that the welcome email is formatted needs to change, the User class would need to be modified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class User\n  def initialize(name, email, password)\n    @name = name\n    @email = email\n    @password = password\n  end\n\n  def register\n    # Validate input\n    if @name.empty? || @email.empty? || @password.empty?\n      return "Invalid input"\n    end\n\n    # Save user to database\n    db = Database.new\n    db.save(@name, @email, @password)\n\n    # Send welcome email\n    Mailer.send_welcome_email(@email)\n  end\nend\n'))),(0,r.kt)(s.Z,{value:"good",label:"Good",mdxType:"TabItem"},(0,r.kt)("p",null,"A better way to structure this code would be to separate the responsibilities into different classes, each with a single responsibility. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'class User\n  def initialize(name, email, password)\n    @name = name\n    @email = email\n    @password = password\n  end\nend\n\nclass UserValidator\n  def self.validate(user)\n    if user.name.empty? || user.email.empty? || user.password.empty?\n      return "Invalid input"\n    end\n  end\nend\n\nclass Database\n  def save(user)\n    # Save user to database\n  end\nend\n\nclass Mailer\n  def self.send_welcome_email(email)\n    # Send welcome email\n  end\nend\n\nclass UserRegistrar\n  def self.register(user)\n    if UserValidator.validate(user)\n      return "Invalid input"\n    end\n    Database.new.save(user)\n    Mailer.send_welcome_email(user.email)\n  end\nend\n')),(0,r.kt)("p",null,"With this refactored code, each class has a single responsibility and can be changed independently of the others.")),(0,r.kt)(s.Z,{value:"specs",label:"Specs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rspec'\n\ndescribe User do\n  describe '#initialize' do\n    it 'initializes with a name, email, and password' do\n      user = User.new('John', 'john@example.com', 'password')\n      expect(user.name).to eq('John')\n      expect(user.email).to eq('john@example.com')\n      expect(user.password).to eq('password')\n    end\n  end\nend\n\ndescribe UserValidator do\n  describe '.validate' do\n    it 'returns \"Invalid input\" if the user has an empty name, email, or password' do\n      user = User.new('', '', '')\n      expect(UserValidator.validate(user)).to eq('Invalid input')\n    end\n\n    it 'returns nil if the user has a non-empty name, email, and password' do\n      user = User.new('John', 'john@example.com', 'password')\n      expect(UserValidator.validate(user)).to be_nil\n    end\n  end\nend\n\ndescribe Database do\n  describe '#save' do\n    it 'saves the user to the database' do\n      user = User.new('John', 'john@example.com', 'password')\n      database = Database.new\n      expect(database).to receive(:save).with(user)\n      database.save(user)\n    end\n  end\nend\n\ndescribe Mailer do\n  describe '.send_welcome_email' do\n    it 'sends a welcome email to the provided email address' do\n      expect(Mailer).to receive(:send_welcome_email).with('john@example.com')\n      Mailer.send_welcome_email('john@example.com')\n    end\n  end\nend\n\ndescribe UserRegistrar do\n  describe '.register' do\n    it 'saves the user to the database and sends a welcome email' do\n      user = User.new('John', 'john@example.com', 'password')\n      database = Database.new\n      expect(database).to receive(:save).with(user)\n      expect(Mailer).to receive(:send_welcome_email).with('john@example.com')\n      UserRegistrar.register(user)\n    end\n\n    it 'returns \"Invalid input\" if the user has an empty name, email, or password' do\n      user = User.new('', '', '')\n      expect(UserRegistrar.register(user)).to eq('Invalid input')\n    end\n  end\nend\n")))))}m.isMDXComponent=!0}}]);