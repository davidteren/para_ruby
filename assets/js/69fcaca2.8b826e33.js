"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="Duck Typing",s={unversionedId:"glossary/duck_typing",id:"glossary/duck_typing",title:"Duck Typing",description:'In Ruby, "duck typing" refers to the idea that an object\'s methods and properties determine its behavior, rather than its inheritance from a particular class or implementation of a specific interface. This means that, in Ruby, it is not necessary to specify the type of an object in order to use it; instead, you can simply use any object that responds to the methods that you need.',source:"@site/docs/glossary/duck_typing.md",sourceDirName:"glossary",slug:"/glossary/duck_typing",permalink:"/para_ruby/docs/glossary/duck_typing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Composition",permalink:"/para_ruby/docs/glossary/composition"},next:{title:"Inheritance",permalink:"/para_ruby/docs/glossary/inheritance"}},p={},c=[{value:"Other examples",id:"other-examples",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"duck-typing"},"Duck Typing"),(0,r.kt)("p",null,'In Ruby, "duck typing" refers to the idea that an object\'s methods and properties determine its behavior, rather than its inheritance from a particular class or implementation of a specific interface. This means that, in Ruby, it is not necessary to specify the type of an object in order to use it; instead, you can simply use any object that responds to the methods that you need.'),(0,r.kt)("p",null,"For example, consider the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'def print_name(object)\n  puts object.name\nend\n\nclass Person\n  attr_reader :name\n  \n  def initialize(name)\n    @name = name\n  end\nend\n\nclass Dog\n  attr_reader :name\n  \n  def initialize(name)\n    @name = name\n  end\nend\n\nperson = Person.new("Alice")\ndog = Dog.new("Fido")\n\nprint_name(person)  # Outputs "Alice"\nprint_name(dog)     # Outputs "Fido"\n\n')),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"print_name")," method takes an object as an argument and calls the name method on it. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dog")," classes both have a ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," method, so they can both be used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"print_name")," method without any issues. This is an example of duck typing in Ruby, because the objects are being used based on their ability to respond to the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," method, rather than their specific class or type."),(0,r.kt)("h2",{id:"other-examples"},"Other examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'# Using an object as an enumerable\n\ndef print_uppercase(enumerable)\n  enumerable.each do |item|\n    puts item.upcase\n  end\nend\n\nnames = ["Alice", "Bob", "Charlie"]\nprint_uppercase(names)  # Outputs "ALICE", "BOB", "CHARLIE"\n\n# Using an object as a hash\n\ndef print_value(hash, key)\n  puts hash[key]\nend\n\nperson = { name: "Alice", age: 30 }\nprint_value(person, :name)  # Outputs "Alice"\n')),(0,r.kt)("p",null,"In the first example, the print_uppercase method takes an enumerable object as an argument and iterates over it, calling the upcase method on each item. The names array is an enumerable object, so it can be used with this method."),(0,r.kt)("p",null,"In the second example, the print_value method takes a hash object as an argument and retrieves a value from it using the [] operator. The person hash is a hash object, so it can be used with this method."),(0,r.kt)("p",null,"In both of these examples, the objects are being used based on their ability to respond to certain methods, rather than their specific class or type. This is an example of duck typing in Ruby."))}u.isMDXComponent=!0}}]);